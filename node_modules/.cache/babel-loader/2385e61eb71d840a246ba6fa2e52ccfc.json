{"ast":null,"code":"import axios from \"../../axios/axios-quiz\";\nimport { FETCH_QUIZES_START, FETCH_QUIZES_SUCCESS, FETCH_QUIZES_ERROR, FETCH_QUIZ_SUCCESS, FETCH_QUIZ_RETRY } from \"./actionTypes\";\nexport function fetchQuizes() {\n  return async dispatch => {\n    dispatch(fetchQuizesStart());\n\n    try {\n      const response = await axios.get(\"https://react-quiz-9637e.firebaseio.com/quizes.json\");\n      const quizes = [];\n      Object.keys(response.data).forEach((key, index) => {\n        quizes.push({\n          id: key,\n          name: \"\\u0422\\u0435\\u0441\\u0442 \\u2116\".concat(index + 1)\n        });\n      });\n      dispatch(fetchQuizesSuccess(quizes));\n    } catch (e) {\n      dispatch(fetchQuizesError(e));\n    }\n  };\n}\nexport function fetchQuiz(quizId) {\n  return async dispatch => {\n    dispatch(fetchQuizesStart());\n\n    try {\n      const response = await axios.get(\"\".concat(quizId, \".json\"));\n      dispatch(fetchQuizSuccess(response.data));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n}\nexport function quizAnswerClick(answerId) {\n  return (dispatch, getState) => {\n    const state = getState().quiz;\n    const question = state.quiz[state.activeQuestion];\n    const results = state.results;\n    if (state.answerState) if (state.answerState[Object.keys(state.answerState)[0]] === \"success\") return;\n\n    if (question.rightAnswerId === answerId) {\n      if (!results[question.id]) results[question.id] = \"success\";\n      this.setState({\n        answerState: {\n          [answerId]: \"success\"\n        },\n        results\n      });\n\n      if (!this.isQuizFinished()) {\n        const timeout = setTimeout(() => {\n          this.setState({\n            activeQuestion: this.state.activeQuestion + 1,\n            answerState: null\n          });\n          clearTimeout(timeout);\n        }, 1000);\n      } else {\n        this.setState({\n          isFinished: true\n        });\n      }\n    } else {\n      results[question.id] = \"error\";\n      this.setState({\n        answerState: {\n          [answerId]: \"error\"\n        },\n        results\n      });\n    }\n  };\n}\nexport function fetchQuizSuccess(quiz) {\n  return {\n    type: FETCH_QUIZ_SUCCESS,\n    quiz\n  };\n}\nexport function fetchQuizRetry() {\n  return {\n    type: FETCH_QUIZ_RETRY\n  };\n}\nexport function fetchQuizesStart() {\n  return {\n    type: FETCH_QUIZES_START\n  };\n}\nexport function fetchQuizesSuccess(quizes) {\n  return {\n    type: FETCH_QUIZES_SUCCESS,\n    quizes: quizes\n  };\n}\nexport function fetchQuizesError(error) {\n  return {\n    type: FETCH_QUIZES_ERROR,\n    error: error\n  };\n}","map":{"version":3,"sources":["D:\\Desktop\\React\\react-quiz\\src\\store\\actions\\quiz.js"],"names":["axios","FETCH_QUIZES_START","FETCH_QUIZES_SUCCESS","FETCH_QUIZES_ERROR","FETCH_QUIZ_SUCCESS","FETCH_QUIZ_RETRY","fetchQuizes","dispatch","fetchQuizesStart","response","get","quizes","Object","keys","data","forEach","key","index","push","id","name","fetchQuizesSuccess","e","fetchQuizesError","fetchQuiz","quizId","fetchQuizSuccess","console","log","quizAnswerClick","answerId","getState","state","quiz","question","activeQuestion","results","answerState","rightAnswerId","setState","isQuizFinished","timeout","setTimeout","clearTimeout","isFinished","type","fetchQuizRetry","error"],"mappings":"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","sourcesContent":["import axios from \"../../axios/axios-quiz\"\r\nimport {FETCH_QUIZES_START, FETCH_QUIZES_SUCCESS, FETCH_QUIZES_ERROR, FETCH_QUIZ_SUCCESS, FETCH_QUIZ_RETRY} from \"./actionTypes\"\r\n\r\nexport function fetchQuizes(){\r\n    return async dispatch => {\r\n        dispatch(fetchQuizesStart());\r\n        try{\r\n            const response = await axios.get(\"https://react-quiz-9637e.firebaseio.com/quizes.json\");\r\n            const quizes = [];\r\n    \r\n            Object.keys(response.data).forEach((key, index) => {\r\n                quizes.push({\r\n                    id: key,\r\n                    name: `Тест №${index + 1}`\r\n                })\r\n            })\r\n            dispatch(fetchQuizesSuccess(quizes));\r\n        } catch(e){\r\n            dispatch(fetchQuizesError(e));\r\n        }\r\n    }\r\n}\r\n\r\nexport function fetchQuiz(quizId){\r\n    return async dispatch =>{\r\n        dispatch(fetchQuizesStart());\r\n        try{\r\n\t\t\tconst response = await axios.get(`${quizId}.json`);\r\n\r\n            dispatch(fetchQuizSuccess(response.data))\r\n\t\t} catch(e){\r\n\t\t\tconsole.log(e)\r\n\t\t}\t\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function quizAnswerClick(answerId){\r\n    return (dispatch, getState) =>{\r\n        const state = getState().quiz;\r\n        const question = state.quiz[state.activeQuestion];\r\n\t\tconst results = state.results;\r\n\t\t\r\n\t\tif(state.answerState)\r\n\t\t\tif(state.answerState[Object.keys(state.answerState)[0]] === \"success\")\r\n\t\t\t\treturn\r\n\t\t\r\n\t\tif(question.rightAnswerId === answerId){\r\n\t\t\tif(!results[question.id])\r\n\t\t\t\tresults[question.id] = \"success\";\r\n\t\t\tthis.setState({\r\n\t\t\t\tanswerState: {[answerId]: \"success\"},\r\n\t\t\t\tresults\r\n\t\t\t});\r\n\r\n\t\t\tif(!this.isQuizFinished()){\r\n\t\t\t\tconst timeout = setTimeout(()=>{\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tactiveQuestion: this.state.activeQuestion + 1,\r\n\t\t\t\t\t\tanswerState: null\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\t}, 1000)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setState({isFinished: true});\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tresults[question.id] = \"error\";\r\n\t\t\tthis.setState({\r\n\t\t\t\tanswerState: {[answerId]: \"error\"},\r\n\t\t\t\tresults\r\n\t\t\t})\r\n\t\t}\r\n    }\r\n}\r\n\r\nexport function fetchQuizSuccess(quiz){\r\n    return {\r\n        type: FETCH_QUIZ_SUCCESS,\r\n        quiz\r\n    }\r\n}\r\n\r\nexport function fetchQuizRetry(){\r\n    return {\r\n        type: FETCH_QUIZ_RETRY\r\n    }\r\n}\r\n\r\nexport function fetchQuizesStart(){\r\n    return {\r\n        type: FETCH_QUIZES_START\r\n    }\r\n}\r\n\r\nexport function fetchQuizesSuccess(quizes){\r\n    return{\r\n        type: FETCH_QUIZES_SUCCESS,\r\n        quizes: quizes\r\n    }\r\n}\r\n\r\nexport function fetchQuizesError(error){\r\n    return{\r\n        type: FETCH_QUIZES_ERROR,\r\n        error: error\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}