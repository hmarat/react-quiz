{"ast":null,"code":"import axios from \"../../axios/axios-quiz\";\nimport { FETCH_QUIZES_START, FETCH_QUIZES_SUCCESS, FETCH_QUIZES_ERROR, FETCH_QUIZ_SUCCESS, QUIZ_SET_STATE, QUIZ_FINISHED, NEXT_QUESTION, RETRY_QUIZ } from \"./actionTypes\";\nexport function fetchQuizes() {\n  return async dispatch => {\n    dispatch(fetchQuizesStart());\n\n    try {\n      const response = await axios.get(\"https://react-quiz-9637e.firebaseio.com/quizes.json\");\n      const quizes = [];\n      Object.keys(response.data).forEach((key, index) => {\n        quizes.push({\n          id: key,\n          name: \"\\u0422\\u0435\\u0441\\u0442 \\u2116\".concat(index + 1)\n        });\n      });\n      dispatch(fetchQuizesSuccess(quizes));\n    } catch (e) {\n      dispatch(fetchQuizesError(e));\n    }\n  };\n}\nexport function fetchQuiz(quizId) {\n  return async dispatch => {\n    dispatch(fetchQuizesStart());\n\n    try {\n      const response = await axios.get(\"\".concat(quizId, \".json\"));\n      dispatch(fetchQuizSuccess(response.data));\n    } catch (e) {\n      dispatch(fetchQuizesError(e));\n    }\n  };\n}\nexport function quizSetState(answerState, results) {\n  return {\n    type: QUIZ_SET_STATE,\n    answerState,\n    results\n  };\n}\nexport function quizFinished() {\n  return {\n    type: QUIZ_FINISHED\n  };\n}\nexport function nextQuestion(number) {\n  return {\n    type: NEXT_QUESTION,\n    number\n  };\n}\nexport function quizAnswerClick(answerId) {\n  return (dispatch, getState) => {\n    const state = getState().quiz;\n    if (state.answerState) if (state.answerState[Object.keys(state.answerState)[0]] === \"success\") {\n      return;\n    }\n    const question = state.quiz[state.activeQuestion];\n    const results = state.results;\n\n    if (question.rightAnswerId === answerId) {\n      if (!results[question.id]) {\n        results[question.id] = \"success\";\n      }\n\n      dispatch(quizSetState({\n        [answerId]: \"success\"\n      }, results));\n\n      if (!isQuizFinished(state)) {\n        const timeout = setTimeout(() => {\n          dispatch(nextQuestion(state.activeQuestion + 1));\n          clearTimeout(timeout);\n        }, 1000);\n      } else {\n        dispatch(quizFinished());\n      }\n    } else {\n      results[question.id] = \"error\";\n      dispatch(quizSetState({\n        [answerId]: \"error\"\n      }, results));\n    }\n  };\n}\nexport function fetchQuizSuccess(quiz) {\n  return {\n    type: FETCH_QUIZ_SUCCESS,\n    quiz\n  };\n}\nexport function retryQuiz() {\n  return {\n    type: RETRY_QUIZ\n  };\n}\nexport function fetchQuizesStart() {\n  return {\n    type: FETCH_QUIZES_START\n  };\n}\nexport function fetchQuizesSuccess(quizes) {\n  return {\n    type: FETCH_QUIZES_SUCCESS,\n    quizes: quizes\n  };\n}\nexport function fetchQuizesError(error) {\n  return {\n    type: FETCH_QUIZES_ERROR,\n    error: error\n  };\n}\n\nconst isQuizFinished = state => {\n  return state.activeQuestion + 1 === state.quiz.length;\n};","map":{"version":3,"sources":["D:\\Desktop\\React\\react-quiz\\src\\store\\actions\\quiz.js"],"names":["axios","FETCH_QUIZES_START","FETCH_QUIZES_SUCCESS","FETCH_QUIZES_ERROR","FETCH_QUIZ_SUCCESS","QUIZ_SET_STATE","QUIZ_FINISHED","NEXT_QUESTION","RETRY_QUIZ","fetchQuizes","dispatch","fetchQuizesStart","response","get","quizes","Object","keys","data","forEach","key","index","push","id","name","fetchQuizesSuccess","e","fetchQuizesError","fetchQuiz","quizId","fetchQuizSuccess","quizSetState","answerState","results","type","quizFinished","nextQuestion","number","quizAnswerClick","answerId","getState","state","quiz","question","activeQuestion","rightAnswerId","isQuizFinished","timeout","setTimeout","clearTimeout","retryQuiz","error","length"],"mappings":"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","sourcesContent":["import axios from \"../../axios/axios-quiz\"\r\nimport {FETCH_QUIZES_START, FETCH_QUIZES_SUCCESS, FETCH_QUIZES_ERROR, FETCH_QUIZ_SUCCESS, QUIZ_SET_STATE, QUIZ_FINISHED, NEXT_QUESTION, RETRY_QUIZ} from \"./actionTypes\"\r\n\r\nexport function fetchQuizes(){\r\n    return async dispatch => {\r\n        dispatch(fetchQuizesStart());\r\n        try{\r\n            const response = await axios.get(\"https://react-quiz-9637e.firebaseio.com/quizes.json\");\r\n            const quizes = [];\r\n    \r\n            Object.keys(response.data).forEach((key, index) => {\r\n                quizes.push({\r\n                    id: key,\r\n                    name: `Тест №${index + 1}`\r\n                })\r\n            })\r\n            dispatch(fetchQuizesSuccess(quizes));\r\n        } catch(e){\r\n            dispatch(fetchQuizesError(e));\r\n        }\r\n    }\r\n}\r\n\r\nexport function fetchQuiz(quizId){\r\n    return async dispatch =>{\r\n        dispatch(fetchQuizesStart());\r\n        try{\r\n            const response = await axios.get(`${quizId}.json`);\r\n            \r\n            dispatch(fetchQuizSuccess(response.data))\r\n\t\t} catch(e){\r\n\t\t\tdispatch(fetchQuizesError(e));\r\n\t\t}\t\r\n    }\r\n}\r\n\r\nexport function quizSetState(answerState, results){\r\n    return{\r\n        type: QUIZ_SET_STATE,\r\n        answerState,\r\n        results\r\n    }\r\n}\r\n\r\nexport function quizFinished(){\r\n    return{\r\n        type: QUIZ_FINISHED,\r\n    }\r\n}\r\n\r\nexport function nextQuestion(number){\r\n    return{\r\n        type: NEXT_QUESTION,\r\n        number\r\n    }\r\n}\r\n\r\nexport function quizAnswerClick(answerId){\r\n    return (dispatch, getState) =>{\r\n        const state = getState().quiz;\r\n             \r\n\t\tif(state.answerState)\r\n\t\t\tif(state.answerState[Object.keys(state.answerState)[0]] === \"success\"){\r\n                return\r\n            }\r\n\r\n        const question = state.quiz[state.activeQuestion];\r\n        const results = state.results;\r\n        \r\n\t\tif(question.rightAnswerId === answerId){\r\n\t\t\tif(!results[question.id]){\r\n                results[question.id] = \"success\";\r\n            }\r\n            dispatch(quizSetState({[answerId]: \"success\"}, results))\r\n            \r\n            \r\n\t\t\tif(!isQuizFinished(state)){\r\n\t\t\t\tconst timeout = setTimeout(()=>{\r\n                    dispatch(nextQuestion(state.activeQuestion + 1));\r\n\t\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\t}, 1000)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdispatch(quizFinished())\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n            results[question.id] = \"error\";\r\n            dispatch(quizSetState({[answerId]: \"error\"}, results))\r\n\t\t}\r\n    }\r\n}\r\n\r\nexport function fetchQuizSuccess(quiz){\r\n    return {\r\n        type: FETCH_QUIZ_SUCCESS,\r\n        quiz\r\n    }\r\n}\r\n\r\nexport function retryQuiz(){\r\n    return {\r\n        type: RETRY_QUIZ\r\n    }\r\n}\r\n\r\nexport function fetchQuizesStart(){\r\n    return {\r\n        type: FETCH_QUIZES_START\r\n    }\r\n}\r\n\r\nexport function fetchQuizesSuccess(quizes){\r\n    return{\r\n        type: FETCH_QUIZES_SUCCESS,\r\n        quizes: quizes\r\n    }\r\n}\r\n\r\nexport function fetchQuizesError(error){\r\n    return{\r\n        type: FETCH_QUIZES_ERROR,\r\n        error: error\r\n    }\r\n}\r\n\r\nconst isQuizFinished = state => {\r\n    return state.activeQuestion + 1 === state.quiz.length;\r\n}"]},"metadata":{},"sourceType":"module"}