{"ast":null,"code":"import axios from \"../../axios/axios-quiz\";\nimport { FETCH_QUIZES_START, FETCH_QUIZES_SUCCESS, FETCH_QUIZES_ERROR, FETCH_QUIZ_SUCCESS, QUIZ_SET_STATE, QUIZ_FINISHED, NEXT_QUESTION, FETCH_QUIZ_RETRY } from \"./actionTypes\";\nexport function fetchQuizes() {\n  return async dispatch => {\n    dispatch(fetchQuizesStart());\n\n    try {\n      const response = await axios.get(\"https://react-quiz-9637e.firebaseio.com/quizes.json\");\n      const quizes = [];\n      Object.keys(response.data).forEach((key, index) => {\n        quizes.push({\n          id: key,\n          name: \"\\u0422\\u0435\\u0441\\u0442 \\u2116\".concat(index + 1)\n        });\n      });\n      dispatch(fetchQuizesSuccess(quizes));\n    } catch (e) {\n      dispatch(fetchQuizesError(e));\n    }\n  };\n}\nexport function fetchQuiz(quizId) {\n  return async dispatch => {\n    dispatch(fetchQuizesStart());\n\n    try {\n      const response = await axios.get(\"\".concat(quizId, \".json\"));\n      dispatch(fetchQuizSuccess(response.data));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n}\nexport function quizSetState(answerState, results) {\n  return {\n    type: QUIZ_SET_STATE,\n    answerState,\n    results\n  };\n}\nexport function quizFinished() {\n  return {\n    type: QUIZ_FINISHED\n  };\n}\nexport function nextQuestion(nextQuestion) {\n  return {\n    type: NEXT_QUESTION,\n    activeQuestion: nextQuestion\n  };\n}\nexport function quizAnswerClick(answerId) {\n  return (dispatch, getState) => {\n    const state = getState().quiz;\n    const question = state.quiz[state.activeQuestion];\n    const results = state.results;\n\n    const isQuizFinished = () => {\n      return state.activeQuestion + 1 === state.quiz.length;\n    };\n\n    if (state.answerState) if (state.answerState[Object.keys(state.answerState)[0]] === \"success\") return;\n\n    if (question.rightAnswerId === answerId) {\n      if (!results[question.id]) results[question.id] = \"success\";\n      dispatch(quizSetState({\n        [answerId]: \"success\"\n      }, results));\n\n      if (!isQuizFinished()) {\n        const timeout = setTimeout(() => {\n          // this.setState({\n          // \tactiveQuestion: this.state.activeQuestion + 1,\n          // \tanswerState: null\n          // });\n          dispatch();\n          clearTimeout(timeout);\n        }, 1000);\n      } else {\n        dispatch(quizFinished());\n      }\n    } else {\n      dispatch(quizSetState({\n        [answerId]: \"error\"\n      }, results));\n    }\n  };\n}\nexport function fetchQuizSuccess(quiz) {\n  return {\n    type: FETCH_QUIZ_SUCCESS,\n    quiz\n  };\n}\nexport function fetchQuizRetry() {\n  return {\n    type: FETCH_QUIZ_RETRY\n  };\n}\nexport function fetchQuizesStart() {\n  return {\n    type: FETCH_QUIZES_START\n  };\n}\nexport function fetchQuizesSuccess(quizes) {\n  return {\n    type: FETCH_QUIZES_SUCCESS,\n    quizes: quizes\n  };\n}\nexport function fetchQuizesError(error) {\n  return {\n    type: FETCH_QUIZES_ERROR,\n    error: error\n  };\n}","map":{"version":3,"sources":["D:\\Desktop\\React\\react-quiz\\src\\store\\actions\\quiz.js"],"names":["axios","FETCH_QUIZES_START","FETCH_QUIZES_SUCCESS","FETCH_QUIZES_ERROR","FETCH_QUIZ_SUCCESS","QUIZ_SET_STATE","QUIZ_FINISHED","NEXT_QUESTION","FETCH_QUIZ_RETRY","fetchQuizes","dispatch","fetchQuizesStart","response","get","quizes","Object","keys","data","forEach","key","index","push","id","name","fetchQuizesSuccess","e","fetchQuizesError","fetchQuiz","quizId","fetchQuizSuccess","console","log","quizSetState","answerState","results","type","quizFinished","nextQuestion","activeQuestion","quizAnswerClick","answerId","getState","state","quiz","question","isQuizFinished","length","rightAnswerId","timeout","setTimeout","clearTimeout","fetchQuizRetry","error"],"mappings":"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","sourcesContent":["import axios from \"../../axios/axios-quiz\"\r\nimport {FETCH_QUIZES_START, FETCH_QUIZES_SUCCESS, FETCH_QUIZES_ERROR, FETCH_QUIZ_SUCCESS, QUIZ_SET_STATE, QUIZ_FINISHED, NEXT_QUESTION, FETCH_QUIZ_RETRY} from \"./actionTypes\"\r\n\r\nexport function fetchQuizes(){\r\n    return async dispatch => {\r\n        dispatch(fetchQuizesStart());\r\n        try{\r\n            const response = await axios.get(\"https://react-quiz-9637e.firebaseio.com/quizes.json\");\r\n            const quizes = [];\r\n    \r\n            Object.keys(response.data).forEach((key, index) => {\r\n                quizes.push({\r\n                    id: key,\r\n                    name: `Тест №${index + 1}`\r\n                })\r\n            })\r\n            dispatch(fetchQuizesSuccess(quizes));\r\n        } catch(e){\r\n            dispatch(fetchQuizesError(e));\r\n        }\r\n    }\r\n}\r\n\r\nexport function fetchQuiz(quizId){\r\n    return async dispatch =>{\r\n        dispatch(fetchQuizesStart());\r\n        try{\r\n\t\t\tconst response = await axios.get(`${quizId}.json`);\r\n\r\n            dispatch(fetchQuizSuccess(response.data))\r\n\t\t} catch(e){\r\n\t\t\tconsole.log(e)\r\n\t\t}\t\r\n    }\r\n}\r\n\r\nexport function quizSetState(answerState, results){\r\n    return{\r\n        type: QUIZ_SET_STATE,\r\n        answerState,\r\n        results\r\n    }\r\n}\r\n\r\nexport function quizFinished(){\r\n    return{\r\n        type: QUIZ_FINISHED,\r\n    }\r\n}\r\n\r\nexport function nextQuestion(nextQuestion){\r\n    return{\r\n        type: NEXT_QUESTION,\r\n        activeQuestion: nextQuestion\r\n    }\r\n}\r\n\r\nexport function quizAnswerClick(answerId){\r\n    return (dispatch, getState) =>{\r\n        const state = getState().quiz;\r\n        const question = state.quiz[state.activeQuestion];\r\n        const results = state.results;\r\n        \r\n        const isQuizFinished = () => {\r\n            return state.activeQuestion + 1 === state.quiz.length;\r\n        }\r\n\t\t\r\n\t\tif(state.answerState)\r\n\t\t\tif(state.answerState[Object.keys(state.answerState)[0]] === \"success\")\r\n\t\t\t\treturn\r\n\t\t\r\n\t\tif(question.rightAnswerId === answerId){\r\n\t\t\tif(!results[question.id])\r\n                results[question.id] = \"success\";\r\n                \r\n            dispatch(quizSetState({[answerId]: \"success\"}, results))\r\n            \r\n\t\t\tif(!isQuizFinished()){\r\n\t\t\t\tconst timeout = setTimeout(()=>{\r\n\t\t\t\t\t// this.setState({\r\n\t\t\t\t\t// \tactiveQuestion: this.state.activeQuestion + 1,\r\n\t\t\t\t\t// \tanswerState: null\r\n                    // });\r\n                    dispatch()\r\n\r\n\t\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\t}, 1000)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdispatch(quizFinished())\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n            dispatch(quizSetState({[answerId]: \"error\"}, results))\r\n\t\t}\r\n    }\r\n}\r\n\r\nexport function fetchQuizSuccess(quiz){\r\n    return {\r\n        type: FETCH_QUIZ_SUCCESS,\r\n        quiz\r\n    }\r\n}\r\n\r\nexport function fetchQuizRetry(){\r\n    return {\r\n        type: FETCH_QUIZ_RETRY\r\n    }\r\n}\r\n\r\nexport function fetchQuizesStart(){\r\n    return {\r\n        type: FETCH_QUIZES_START\r\n    }\r\n}\r\n\r\nexport function fetchQuizesSuccess(quizes){\r\n    return{\r\n        type: FETCH_QUIZES_SUCCESS,\r\n        quizes: quizes\r\n    }\r\n}\r\n\r\nexport function fetchQuizesError(error){\r\n    return{\r\n        type: FETCH_QUIZES_ERROR,\r\n        error: error\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}